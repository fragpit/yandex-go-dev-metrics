// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fragpit/yandex-go-dev-metrics/internal/repository (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../mocks/repository/repository_mock.go . Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/fragpit/yandex-go-dev-metrics/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close), ctx)
}

// GetMetric mocks base method.
func (m *MockRepository) GetMetric(ctx context.Context, name string) (model.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", ctx, name)
	ret0, _ := ret[0].(model.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockRepositoryMockRecorder) GetMetric(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockRepository)(nil).GetMetric), ctx, name)
}

// GetMetrics mocks base method.
func (m *MockRepository) GetMetrics(ctx context.Context) (map[string]model.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx)
	ret0, _ := ret[0].(map[string]model.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockRepositoryMockRecorder) GetMetrics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockRepository)(nil).GetMetrics), ctx)
}

// Initialize mocks base method.
func (m *MockRepository) Initialize(arg0 []model.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockRepositoryMockRecorder) Initialize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockRepository)(nil).Initialize), arg0)
}

// Ping mocks base method.
func (m *MockRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping), ctx)
}

// SetOrUpdateMetric mocks base method.
func (m *MockRepository) SetOrUpdateMetric(ctx context.Context, metric model.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrUpdateMetric", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrUpdateMetric indicates an expected call of SetOrUpdateMetric.
func (mr *MockRepositoryMockRecorder) SetOrUpdateMetric(ctx, metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrUpdateMetric", reflect.TypeOf((*MockRepository)(nil).SetOrUpdateMetric), ctx, metric)
}

// SetOrUpdateMetricBatch mocks base method.
func (m *MockRepository) SetOrUpdateMetricBatch(ctx context.Context, metrics []model.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrUpdateMetricBatch", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrUpdateMetricBatch indicates an expected call of SetOrUpdateMetricBatch.
func (mr *MockRepositoryMockRecorder) SetOrUpdateMetricBatch(ctx, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrUpdateMetricBatch", reflect.TypeOf((*MockRepository)(nil).SetOrUpdateMetricBatch), ctx, metrics)
}
